# nginx 1.20.x

worker_processes auto;
worker_rlimit_nofile 16384;

events {
    worker_connections 4096;
}

http {
    include mime.types;
    default_type application/octet-stream;

    charset utf-8;

    sendfile on;
    sendfile_max_chunk 512k;
    tcp_nopush on;
    keepalive_timeout 3m;
    types_hash_max_size 4096;
    server_tokens off;
    msie_padding off;

    client_max_body_size 1k;
    client_body_buffer_size 1k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    http2_recv_buffer_size 128k;

    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    http2_max_concurrent_streams 32;
    limit_conn_status 429;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 256;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers on;
    ssl_conf_command Options PrioritizeChaCha;

    ssl_certificate /etc/letsencrypt/live/daniel.micay.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/daniel.micay.dev/privkey.pem;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_buffer_size 4k;

    ssl_trusted_certificate /etc/letsencrypt/live/daniel.micay.dev/chain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    # maintained by certbot-ocsp-fetcher
    ssl_stapling_file /etc/nginx/ocsp-cache/daniel.micay.dev.der;

    access_log /var/log/nginx/access.log combined buffer=64k flush=1m;
    error_log /var/log/nginx/error.log;

    gzip_proxied any;
    gzip_vary on;

    if_modified_since before;

    aio threads;

    server {
        listen 80 backlog=4096;
        listen [::]:80 backlog=4096;
        server_name danielmicay.ca www.danielmicay.ca danielmicay.com www.danielmicay.com danielmicay.dev www.danielmicay.dev micay.ca daniel.micay.ca www.micay.ca micay.devdaniel.micay.dev www.micay.dev;

        root /var/empty;

        # use $host to set up HSTS for redirect domains
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2 backlog=4096;
        listen [::]:443 ssl http2 backlog=4096;
        server_name danielmicay.ca www.danielmicay.ca danielmicay.com www.danielmicay.com danielmicay.dev www.danielmicay.dev micay.ca daniel.micay.ca www.micay.ca micay.dev www.micay.dev;

        root /var/empty;

        include snippets/security-headers.conf;

        return 301 https://daniel.micay.dev$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name daniel.micay.dev;

        root /srv/daniel.micay.dev;


        if ($request_uri ~ ^/(.*)\.html$) {
            return 301 /$1;
        }

        if ($request_uri ~ (.*)//(.*)) {
            return 301 $1/$2;
        }

        if ($request_uri ~ ^(.*)/index$) {
            return 301 $1/;
        }

        location ~ "\.css$" {
            include snippets/security-headers.conf;
            add_header Cross-Origin-Resource-Policy "same-origin" always;
            add_header Cache-Control "public, max-age=31536000";
        }

        location ~ "\.(txt|xml)$" {
            include snippets/security-headers.conf;
            add_header Cross-Origin-Resource-Policy "same-origin" always;
            add_header Cache-Control "public, max-age=1800";
        }

        location ~ "\.(br|gz)$" {
            internal;
        }

        location ~ "(\.html|/)$" {
            include snippets/security-headers.conf;
            add_header Cross-Origin-Resource-Policy "same-origin" always;
            add_header Cache-Control "public, no-cache";
        }

        location / {
            include snippets/security-headers.conf;
            add_header Cache-Control "public, no-cache";
            try_files $uri.html $uri/ =404;
        }

        include snippets/security-headers.conf;
    }

    server {
        listen 127.0.0.1:81;
        listen [::1]:81;

        location /nginx_status {
            stub_status;
            access_log off;
        }
    }
}
